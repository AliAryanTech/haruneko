name: Create GitHub Release

on: workflow_dispatch

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest]
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout ${{ github.repository }} @ ${{ github.ref }}
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          fetch-depth: 1
#      - name: Install NodeJS
#        uses: actions/setup-node@v1
#        with:
#          node-version: 14.x
#      - name: Update NPM
#        run: npm install -g npm@7 --registry=https://registry.npmjs.org
#      - name: Install NPM Packages
#        run: npm install
#      - name: Build Application
#        run: npm run deploy:app:prod
      - name: Build Application (Dummy)
        run: mkdir ./deploy && echo 'xxxx' > ./deploy/hakuneko-v0.54.0-win-x64.zip && echo 'xxxx' > ./deploy/hakuneko-v0.54.0-win-ia32.zip && echo '0000' > ./deploy/hakuneko-v0.54.0-osx-x64.dmg
      - name: Upload Release Builds
        uses: actions/upload-artifact@v2
        with:
          name: release-builds
          retention-days: 3
          path: deploy
      - name: Upload Release Templates
        uses: actions/upload-artifact@v2
        with:
          name: release-templates
          retention-days: 3
          path: .github/RELEASE_TEMPLATE/*.md
  publish:
    needs: build
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - name: Setup Environment
        run: |
          echo "RELEASE_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "RELEASE_TAG=$(date -u +"%y%m%dT%H%M")" >> $GITHUB_ENV
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Create Release Tag
        run: |
          echo { > ./body.json
          echo \"prerelease\":true, >> ./body.json
          echo \"tag_name\":\"$RELEASE_TAG\", >> ./body.json
          echo \"name\":\"canary â€¢ $RELEASE_DATE\", >> ./body.json
          echo \"body\":\"$(cat -e ./release-templates/pre-release.md | tr '$\r\n' '\\n' | sed s/{TAG}/$RELEASE_TAG/g)\" >> ./body.json
          echo } >> ./body.json
          echo +++ REQUEST +++
          cat ./body.json
          echo -n "RELEASE_ID=" >> $GITHUB_ENV
          curl \
            -X POST \
            -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            'https://api.github.com/repos/${{ github.repository }}/releases' \
            --data @./body.json \
            --silent > ./response.json
          echo +++ RESPONSE +++
          cat ./response.json
          cat ./response.json | grep '"upload_url"' | cut -d'/' -f8 >> $GITHUB_ENV
          rm body.json response.json
      - name: Upload Release Assets
        run: |
          curl \
            -X POST \
            -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'Content-Type: application/octet-stream' \
            'https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets?name=hakuneko-v0.54.0-win-x64.zip' \
            --data-binary @./release-builds/hakuneko-v0.54.0-win-x64.zip \
            --silent
          curl \
            -X POST \
            -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'Content-Type: application/octet-stream' \
            'https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets?name=hakuneko-v0.54.0-win-ia32.zip' \
            --data-binary @./release-builds/hakuneko-v0.54.0-win-ia32.zip \
            --silent
          curl \
            -X POST \
            -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'Content-Type: application/octet-stream' \
            'https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets?name=hakuneko-v0.54.0-osx-x64.dmg' \
            --data-binary @./release-builds/hakuneko-v0.54.0-osx-x64.dmg \
            --silent
# TODO: Would be nice to wrap this in a loop that iterates over all build artifacts ...